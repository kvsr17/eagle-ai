// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered document improvement suggestions.
 *
 * - suggestImprovements - A function that provides suggestions for improving a document's completeness, terms, and legal soundness.
 * - SuggestImprovementsInput - The input type for the suggestImprovements function.
 * - SuggestImprovementsOutput - The return type for the suggestImprovements function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestImprovementsInputSchema = z.object({
  documentText: z.string().describe('The text content of the legal document to be reviewed.'),
  context: z.string().optional().describe('Context about the document to improve suggestions.'),
});
export type SuggestImprovementsInput = z.infer<typeof SuggestImprovementsInputSchema>;

const SuggestImprovementsOutputSchema = z.object({
  suggestions: z.array(
    z.string().describe('A specific suggestion for improving the document.')
  ).describe('A list of suggestions to improve the document, addressing completeness, terms, and legal soundness.'),
});
export type SuggestImprovementsOutput = z.infer<typeof SuggestImprovementsOutputSchema>;

export async function suggestImprovements(input: SuggestImprovementsInput): Promise<SuggestImprovementsOutput> {
  return suggestImprovementsFlow(input);
}

const suggestImprovementsPrompt = ai.definePrompt({
  name: 'suggestImprovementsPrompt',
  input: {schema: SuggestImprovementsInputSchema},
  output: {schema: SuggestImprovementsOutputSchema},
  prompt: `You are an AI Legal Assistant. Your task is to provide suggestions for improving a legal document.

Consider the following document text:

{{documentText}}

Context: {{context}}

Provide a list of actionable suggestions to improve the document's completeness, terms, and legal soundness. Be specific and explain why each suggestion is important.

Format your response as a list of suggestions:
`, // Ensure the AI returns a list of suggestions.
});

const suggestImprovementsFlow = ai.defineFlow(
  {
    name: 'suggestImprovementsFlow',
    inputSchema: SuggestImprovementsInputSchema,
    outputSchema: SuggestImprovementsOutputSchema,
  },
  async input => {
    const {output} = await suggestImprovementsPrompt(input);
    return output!;
  }
);
